{
  "entities": {
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a graphic design project in the portfolio.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Project entity."
        },
        "title": {
          "type": "string",
          "description": "Title of the project."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the project."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the project's main image.",
          "format": "uri"
        },
        "category": {
          "type": "string",
          "description": "Category the project belongs to (e.g., Branding, Web Design)."
        },
        "resourceIds": {
          "type": "array",
          "description": "References to Resources. (Relationship: Project 1:N Resource)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "imageUrl",
        "category"
      ]
    },
    "Resource": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Resource",
      "type": "object",
      "description": "Represents a design resource, tool, or inspiration link.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Resource entity."
        },
        "title": {
          "type": "string",
          "description": "Title of the resource."
        },
        "url": {
          "type": "string",
          "description": "URL of the resource.",
          "format": "uri"
        },
        "description": {
          "type": "string",
          "description": "Brief description of the resource."
        },
        "category": {
          "type": "string",
          "description": "Category of the resource (e.g., Tools, Inspiration, Tutorials)."
        }
      },
      "required": [
        "id",
        "title",
        "url",
        "description",
        "category"
      ]
    }
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project data for each user. Projects are owned by the user identified by {userId}.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user who owns the project."
            },
            {
              "name": "projectId",
              "description": "The ID of the project."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projects/{projectId}/resources/{resourceId}",
        "definition": {
          "entityName": "Resource",
          "schema": {
            "$ref": "#/backend/entities/Resource"
          },
          "description": "Stores resources associated with a specific project owned by a user. Resources are owned by the user, accessible via the project.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user who owns the project and its resources."
            },
            {
              "name": "projectId",
              "description": "The ID of the project to which the resource belongs."
            },
            {
              "name": "resourceId",
              "description": "The ID of the resource."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure prioritizes authorization independence and QAPs (Query After Pagination). It leverages structural segregation to maintain a homogeneous security posture within collections, and denormalization to avoid complex `get()` calls in security rules. All data is owned by the user and access via a path based ownership model.\n\nThe `/users/{userId}/projects/{projectId}` structure enables simple, secure rules based on path-based ownership. Resources are nested under Projects, continuing the ownership model. The `resourceIds` field in `Project` is only a reference and not used for authorization.\n\nThis structure enables QAPs because listing projects only requires checking the path. Similarly, listing resources under a specific project only requires verifying the path."
  }
}
