/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for data access. Each user has full control over their own data tree, and no access to other users' data. The root data structure is based on nested collections under `/users/{userId}`.
 *
 * Data Structure:
 * All data is nested under `/users/{userId}`, representing a private data tree for each user. Projects are stored under `/users/{userId}/projects/{projectId}`, and Resources are stored under `/users/{userId}/projects/{projectId}/resources/{resourceId}`.
 *
 * Key Security Decisions:
 * - All write operations are restricted to the owner of the data.
 * - Listing other users' data is disallowed.
 * - The ruleset does not validate the specific schema of the data being written, focusing instead on authorization.
 *
 * Denormalization for Authorization:
 *  - The path `/users/{userId}` is used to infer ownership. Therefore, the `userId` is denormalized into the document in the create rule.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource, based on the userId in the path.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the projects collection under a specific user.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) User 'user123' can create a project with project ID matching the path.
     * @allow (get) User 'user123' can get project with project ID matching the path.
     * @allow (update) User 'user123' can update project with project ID matching the path.
     * @allow (delete) User 'user123' can delete project with project ID matching the path.
     * @deny (create) User 'user456' cannot create a project under user 'user123'.
     * @deny (update) User 'user456' cannot update a project under user 'user123'.
     * @deny (delete) User 'user456' cannot delete a project under user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId} {
      // Read Rules: Only the owner can read
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write Rules: Only the owner can create, update, or delete
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the resources collection under a specific project for a specific user.
     * @path /users/{userId}/projects/{projectId}/resources/{resourceId}
     * @allow (create) User 'user123' can create a resource under project 'project123'.
     * @allow (get) User 'user123' can get resource under project 'project123'.
     * @allow (update) User 'user123' can update resource under project 'project123'.
     * @allow (delete) User 'user123' can delete resource under project 'project123'.
     * @deny (create) User 'user456' cannot create a resource under project 'project123'.
     * @deny (update) User 'user456' cannot update a resource under project 'project123'.
     * @deny (delete) User 'user456' cannot delete a resource under project 'project123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId}/resources/{resourceId} {
      // Read Rules: Only the owner can read
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write Rules: Only the owner can create, update, or delete
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}