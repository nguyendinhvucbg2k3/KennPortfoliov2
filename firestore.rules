rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user has an admin profile, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    match /projects/{projectId} {
      /**
       * @description Allows anyone to read project details, but only admins can create, update, or delete them.
       * @path /projects/{projectId}
       * @allow (get, list): Any user can read project details.
       * @allow (create, update, delete): Only an admin can modify project details.
       * @deny (create, update, delete): A non-admin user cannot modify project details.
       * @principle Public read, admin-only write access.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /resources/{resourceId} {
      /**
       * @description Allows anyone to read resource links, but only admins can create, update, or delete them.
       * @path /resources/{resourceId}
       * @allow (get, list): Any user can read resource links.
       * @allow (create, update, delete): Only an admin can modify resource links.
       * @deny (create, update, delete): A non-admin user cannot modify resource links.
       * @principle Public read, admin-only write access.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /experience/{experienceId} {
      /**
       * @description Allows anyone to read experience details, but only admins can create, update, or delete them.
       * @path /experience/{experienceId}
       * @allow (get, list): Any user can read experience details.
       * @allow (create, update, delete): Only an admin can modify experience details.
       * @deny (create, update, delete): A non-admin user cannot modify experience details.
       * @principle Public read, admin-only write access.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /skills/{skillId} {
      /**
       * @description Allows anyone to read skill details, but only admins can create, update, or delete them.
       * @path /skills/{skillId}
       * @allow (get, list): Any user can read skill details.
       * @allow (create, update, delete): Only an admin can modify skill details.
       * @deny (create, update, delete): A non-admin user cannot modify skill details.
       * @principle Public read, admin-only write access.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /personalInfo/{document} {
        /**
         * @description Allows anyone to read personal info, but only admins can create, update, or delete it.
         * @path /personalInfo/main
         * @allow (get): Any user can read personal info.
         * @allow (create, update, delete): Only an admin can modify personal info.
         * @deny (create, update, delete): A non-admin user cannot modify personal info.
         * @principle Public read, admin-only write access.
         */
        allow get: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
        allow list: if false; // There's only one document. Listing is not useful or needed.
    }

    match /admins/{uid} {
      /**
       * @description Allows admins to manage other admin profiles.
       * @path /admins/{uid}
       * @allow (get): Only admins can retrieve admin profiles.
       * @allow (create, update, delete): Only admins can modify admin profiles.
       * @deny (list): Listing admin profiles is not allowed.
       * @deny (create, update, delete): A non-admin user cannot modify admin profiles.
       * @principle Admin-only access for admin management.
       */
      allow get: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
      allow list: if false;
    }
  }
}