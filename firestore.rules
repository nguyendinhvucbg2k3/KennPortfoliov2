/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  All data is nested under
 * /users/{userId}, ensuring that only the authenticated user can access their
 * own data.
 *
 * Data Structure:
 * - /users/{userId}/projects/{projectId}: Stores project data, owned by the user.
 * - /users/{userId}/projects/{projectId}/resources/{resourceId}: Stores resources
 *   associated with a specific project, also owned by the user.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the path-based ownership model.
 * - Data validation is relaxed to allow for rapid prototyping, focusing instead
 *   on authorization.
 *
 * Denormalization for Authorization:
 * The path-based structure inherently denormalizes user ownership, avoiding the
 * need for `get()` calls to determine ownership. The user ID is directly
 * available from the path.
 *
 * Structural Segregation:
 * The application uses structural segregation to delineate ownership.  All
 * user-specific data is stored under the /users/{userId} path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID from the path.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the document exists.
     * @param {string} userId - The user ID from the path.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user projects.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) - User 'user123' can create a project with a matching userId in the path.
     *   request.auth.uid: 'user123'
     *   request.resource.data: { id: 'user123' }
     * @allow (get, list) - User 'user123' can read their own projects.
     *   request.auth.uid: 'user123'
     * @allow (update, delete) - User 'user123' can update/delete their own project if it exists.
     *   request.auth.uid: 'user123'
     * @deny (create) - User 'user456' cannot create a project under 'user123'.
     *   request.auth.uid: 'user456'
     *   request.resource.data: { id: 'user123' }
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/projects/{projectId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for resources nested under user projects.
     * @path /users/{userId}/projects/{projectId}/resources/{resourceId}
     * @allow (create) - User 'user123' can create a resource within their project.
     *   request.auth.uid: 'user123'
     * @allow (get, list) - User 'user123' can read resources within their own project.
     *   request.auth.uid: 'user123'
     * @allow (update, delete) - User 'user123' can update/delete their own resource if it exists.
     *   request.auth.uid: 'user123'
     * @deny (create) - User 'user456' cannot create a resource under 'user123' project.
     *   request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/projects/{projectId}/resources/{resourceId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for skills collection.
     * @path /skills
     * @allow (get, list) - Everyone can read skills.
     * @deny (create, update, delete) - No one can modify skills.
     * @principle Allows public read access, but disallows write access.
     */
    match /skills {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}