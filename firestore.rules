/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user has their own data tree
 * under `/users/{userId}`, and only that user can read or write to that tree.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, creating a clear ownership hierarchy.
 * Projects are stored under /users/{userId}/projects/{projectId}, and Resources are stored
 * under /users/{userId}/projects/{projectId}/resources/{resourceId}.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed because there is no top-level `users` collection.
 * - All access control decisions are based on the authenticated user's ID and the
 *   path structure.
 * - Data validation is relaxed in this prototyping phase, but authorization is strictly
 *   enforced.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users/{userId}/projects/{projectId} path.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) - User 'abc' can create a new project under /users/abc/projects/123 if authenticated as 'abc'.
     * @allow (update) - User 'abc' can update project '123' under /users/abc/projects/123 if authenticated as 'abc'.
     * @allow (delete) - User 'abc' can delete project '123' under /users/abc/projects/123 if authenticated as 'abc'.
     * @allow (get) - User 'abc' can get project '123' under /users/abc/projects/123 if authenticated as 'abc'.
     * @allow (list) - User 'abc' can list projects under /users/abc/projects if authenticated as 'abc'.
     * @deny (create) - User 'def' cannot create a new project under /users/abc/projects/123, even if authenticated, because they are not the owner.
     * @deny (update) - User 'def' cannot update project '123' under /users/abc/projects/123, even if authenticated, because they are not the owner.
     * @deny (delete) - User 'def' cannot delete project '123' under /users/abc/projects/123, even if authenticated, because they are not the owner.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/projects/{projectId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }
      // Read Permissions
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Write Permissions
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/projects/{projectId}/resources/{resourceId} path.
     * @path /users/{userId}/projects/{projectId}/resources/{resourceId}
     * @allow (create) - User 'abc' can create a new resource under /users/abc/projects/123/resources/456 if authenticated as 'abc'.
     * @allow (update) - User 'abc' can update resource '456' under /users/abc/projects/123/resources/456 if authenticated as 'abc'.
     * @allow (delete) - User 'abc' can delete resource '456' under /users/abc/projects/123/resources/456 if authenticated as 'abc'.
     * @allow (get) - User 'abc' can get resource '456' under /users/abc/projects/123/resources/456 if authenticated as 'abc'.
     * @allow (list) - User 'abc' can list resources under /users/abc/projects/123/resources if authenticated as 'abc'.
     * @deny (create) - User 'def' cannot create a new resource under /users/abc/projects/123/resources/456, even if authenticated, because they are not the owner.
     * @deny (update) - User 'def' cannot update resource '456' under /users/abc/projects/123/resources/456, even if authenticated, because they are not the owner.
     * @deny (delete) - User 'def' cannot delete resource '456' under /users/abc/projects/123/resources/456, even if authenticated, because they are not the owner.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/projects/{projectId}/resources/{resourceId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      // Read Permissions
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Write Permissions
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}