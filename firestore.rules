/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user has full control over their own data tree under `/users/{userId}`.
 *
 * Data Structure:
 * All data is nested under the `/users/{userId}` collection. Projects are stored under `/users/{userId}/projects/{projectId}`, and resources associated with projects are stored under `/users/{userId}/projects/{projectId}/resources/{resourceId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing operations are restricted to the owner of the data.
 * - Data validation is relaxed during this prototyping phase, focusing on ownership and relational integrity checks.
 *
 * Denormalization for Authorization:
 * The rules rely on the path-based ownership model, removing the need for complex `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication check.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership check.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Existence and ownership check for updates and deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for documents in the /users/{userId}/projects/{projectId} collection.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) User 'user123' creates a new project with project ID 'project456'.
     * @allow (get) User 'user123' reads project 'project456'.
     * @allow (list) User 'user123' lists all projects.
     * @allow (update) User 'user123' updates project 'project456'.
     * @allow (delete) User 'user123' deletes project 'project456'.
     * @deny (create) User 'user456' attempts to create a project under 'user123'.
     * @deny (update) User 'user456' attempts to update project 'project456' owned by 'user123'.
     * @deny (delete) User 'user456' attempts to delete project 'project456' owned by 'user123'.
     * @principle Enforces document ownership for all operations under a user's path.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for documents in the /users/{userId}/projects/{projectId}/resources/{resourceId} collection.
     * @path /users/{userId}/projects/{projectId}/resources/{resourceId}
     * @allow (create) User 'user123' creates a new resource 'resource789' under project 'project456'.
     * @allow (get) User 'user123' reads resource 'resource789' in project 'project456'.
     * @allow (list) User 'user123' lists all resources in project 'project456'.
     * @allow (update) User 'user123' updates resource 'resource789' in project 'project456'.
     * @allow (delete) User 'user123' deletes resource 'resource789' from project 'project456'.
     * @deny (create) User 'user456' attempts to create a resource under 'user123'â€™s project.
     * @deny (update) User 'user456' attempts to update resource 'resource789' owned by 'user123'.
     * @deny (delete) User 'user456' attempts to delete resource 'resource789' owned by 'user123'.
     * @principle Enforces document ownership for all operations under a user's project path.
     */
    match /users/{userId}/projects/{projectId}/resources/{resourceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /personalInfo/main document.
     * @path /personalInfo/main
     * @allow (get) Authenticated user can read the document.
     * @deny (get) Unauthenticated user cannot read the document.
     * @deny (create, update, delete) All create, update, and delete operations are denied.
     * @principle Restricts access to authenticated users only and denies all write operations.
     */
    match /personalInfo/main {
      allow get: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
      allow list: if false;
    }
  }
}