/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user has full
 * control over their own data, and no access to other users' data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring data isolation. Projects
 * are stored under /users/{userId}/projects/{projectId}, and Resources are stored
 * under /users/{userId}/projects/{projectId}/resources/{resourceId}.
 *
 * Key Security Decisions:
 * - Users can only access data under their own user ID.
 * - Listing of all projects or resources across users is disallowed to prevent
 *   unintended data exposure.
 * - Data shape validation is relaxed to allow for rapid prototyping. Only
 *   authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 * - The rules rely on the path-based ownership model, avoiding the need for
 *   `get()` calls to verify ownership.
 *
 * Structural Segregation:
 * - User-specific data is stored under the /users/{userId} path, preventing
 *   accidental public exposure of private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing document.
     *              This also checks if the document exists, preventing operations on non-existent documents.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for documents in the /users/{userId}/projects/{projectId} collection.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) - User 'user123' can create a new project with ID 'user123' under their own user ID.
     * @allow (get, list) - User 'user123' can read their own project data.
     * @allow (update, delete) - User 'user123' can update or delete their own project with ID 'project456'.
     * @deny (create) - User 'user456' cannot create a project under user 'user123''s ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == projectId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for documents in the /users/{userId}/projects/{projectId}/resources/{resourceId} collection.
     * @path /users/{userId}/projects/{projectId}/resources/{resourceId}
     * @allow (create) - User 'user123' can create a new resource with ID 'resource789' under their own project 'project456'.
     * @allow (get, list) - User 'user123' can read resources under their own project.
     * @allow (update, delete) - User 'user123' can update or delete their own resource.
     * @deny (create) - User 'user456' cannot create a resource under user 'user123''s project.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId}/resources/{resourceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == resourceId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description  Deny access to the `experience` collection as per the reported error.
     * @path /experience
     * @allow   (get)  -  This rule will deny all access to any documents under this collection path.
     * @deny    (list) -  All listing operations will be denied.
     * @principle Explicitly denies access to a collection to resolve a permission error.
     */
    match /experience {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}