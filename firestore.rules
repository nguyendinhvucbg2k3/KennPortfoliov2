/**
 * @fileoverview Firestore Security Rules
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. All data is nested under
 * /users/{userId}, ensuring that only the authenticated user can access their
 * own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, including projects and resources.
 * This hierarchical structure simplifies authorization checks.
 *
 * Key Security Decisions:
 * - Listing of all users is disallowed.
 * - Data validation is minimal, focusing on ownership and relational integrity.
 * - Uses path-based authorization to ensure that the authenticated user ID matches
 *   the user ID in the requested path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     * @param {string} userId The user ID of the owner.
     * @return {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines security rules for user-owned projects.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) - User 'ztdv9DXpTzdHmi7ZSOSso4BHebX2' can create a project under /users/ztdv9DXpTzdHmi7ZSOSso4BHebX2/projects/someProjectId if request.auth.uid matches.
     * @allow (get, update, delete) - User 'ztdv9DXpTzdHmi7ZSOSso4BHebX2' can get, update, or delete the project under /users/ztdv9DXpTzdHmi7ZSOSso4BHebX2/projects/someProjectId.
     * @deny (create) - User 'someOtherUserId' cannot create a project under /users/ztdv9DXpTzdHmi7ZSOSso4BHebX2/projects/someProjectId.
     * @deny (get, update, delete) - User 'someOtherUserId' cannot get, update, or delete the project under /users/ztdv9DXpTzdHmi7ZSOSso4BHebX2/projects/someProjectId.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == projectId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for resources nested under user-owned projects.
     * @path /users/{userId}/projects/{projectId}/resources/{resourceId}
     * @allow (create) - User 'ztdv9DXpTzdHmi7ZSOSso4BHebX2' can create a resource under /users/ztdv9DXpTzdHmi7ZSOSso4BHebX2/projects/someProjectId/resources/someResourceId if request.auth.uid matches.
     * @allow (get, update, delete) - User 'ztdv9DXpTzdHmi7ZSOSso4BHebX2' can get, update, or delete the resource under /users/ztdv9DXpTzdHmi7ZSOSso4BHebX2/projects/someProjectId/resources/someResourceId.
     * @deny (create) - User 'someOtherUserId' cannot create a resource under /users/ztdv9DXpTzdHmi7ZSOSso4BHebX2/projects/someProjectId/resources/someResourceId.
     * @deny (get, update, delete) - User 'someOtherUserId' cannot get, update, or delete the resource under /users/ztdv9DXpTzdHmi7ZSOSso4BHebX2/projects/someProjectId/resources/someResourceId.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/projects/{projectId}/resources/{resourceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == resourceId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Denies all access to the top-level 'experience' collection.
     * @path /experience
     * @allow None
     * @deny All operations. This collection is not intended to be accessed directly.
     * @principle Explicitly denies all operations on the /experience path.
     */
    match /experience {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}