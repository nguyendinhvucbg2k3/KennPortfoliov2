/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data, ensuring that only the authenticated user who owns a document can read, write, update, or delete it. This is achieved through path-based access control.
 *
 * Data Structure:
 * All data is nested under `/users/{userId}`, with projects located at `/users/{userId}/projects/{projectId}` and resources under `/users/{userId}/projects/{projectId}/resources/{resourceId}`.
 *
 * Key Security Decisions:
 * - Listing of all Projects or Resources is disallowed at the root level to prevent unauthorized data exposure.
 * - Only authenticated users can access their own data.
 * - The rules do not enforce any data validation beyond ownership.
 *
 * Denormalization for Authorization:
 * The `userId` is extracted from the path and used to enforce ownership. This avoids costly `get()` operations to retrieve user information.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of an existing document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users collection. Listing users is not allowed.
     * @path /users/{userId}
     * @allow (create) User 'testUser' with ID 'testUser' can create their own document.
     * @deny (create) User 'testUser' with ID 'otherUser' cannot create a document with a different ID.
     * @principle Enforces self-creation: Only the authenticated user can create their own user document.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /users/{userId}/projects collection.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) User 'testUser' can create a new project under their user ID.
     * @deny (create) User 'otherUser' cannot create a project under 'testUser's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/projects/{projectId}/resources collection.
     * @path /users/{userId}/projects/{projectId}/resources/{resourceId}
     * @allow (create) User 'testUser' can create a new resource under their project.
     * @deny (create) User 'otherUser' cannot create a resource under 'testUser's project.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId}/resources/{resourceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Disallow listing all resources at the root level. The failing request in the error report tries to do this.
     * @path /resources
     * @allow (get) N/A - Listing is denied, so individual gets are irrelevant in this context.
     * @deny (list) Any user, regardless of authentication, is denied listing. This matches the error reported by NextJS.
     * @principle Root-level collections should be protected from listing to avoid exposing all documents.
     */
    match /resources {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}