/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for projects and resources. All data is nested under /users/{userId}, ensuring that only the authenticated user can access their own data.
 *
 * Data Structure:
 * - /users/{userId}/projects/{projectId}: Stores project data, owned by the user identified by {userId}.
 * - /users/{userId}/projects/{projectId}/resources/{resourceId}: Stores resources associated with a specific project, also owned by the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Read-only collections are not used in this data model.
 * - Ambiguous relationships default to strict owner-only access.
 *
 * Denormalization for Authorization:
 *  - The data model relies on path-based ownership, eliminating the need for `get()` calls to check ownership.
 *
 * Structural Segregation:
 *  - All project and resource data is stored under a user-specific path, ensuring that private data is not mixed with public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) - User 'testUID' can create their own user document if request.auth.uid == 'testUID'.
     * @deny (create) - User 'testUID' cannot create a user document with a different userId 'otherUID'.
     * @principle Enforces user-ownership for writes, ensures authenticated user can only create their own document, validates relational integrity.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines rules for the /users/{userId}/projects collection.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) - User 'testUID' can create a project under /users/testUID/projects/testProject if request.auth.uid == 'testUID'.
     * @allow (get) - User 'testUID' can read project under /users/testUID/projects/testProject if request.auth.uid == 'testUID'.
     * @deny (update) - User 'otherUID' cannot update a project under /users/testUID/projects/testProject because they are not the owner.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == projectId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines rules for the /users/{userId}/projects/{projectId}/resources collection.
     * @path /users/{userId}/projects/{projectId}/resources/{resourceId}
     * @allow (create) - User 'testUID' can create a resource under /users/testUID/projects/testProject/resources/testResource if request.auth.uid == 'testUID'.
     * @allow (get) - User 'testUID' can read a resource under /users/testUID/projects/testProject/resources/testResource if request.auth.uid == 'testUID'.
     * @deny (delete) - User 'otherUID' cannot delete a resource under /users/testUID/projects/testProject/resources/testResource because they are not the owner.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/projects/{projectId}/resources/{resourceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == resourceId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}